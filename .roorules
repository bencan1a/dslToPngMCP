# Roo Rules for DSL to PNG MCP Project

## Testing Rules

### Two-Tier Testing Approach
- **Docker-based**: Unit and integration tests (require service dependencies)
- **Host-based**: E2E tests (manage development environment)

### Docker Testing (Unit/Integration)
**CRITICAL: NEVER run `pytest` directly for unit/integration tests**
- **ALWAYS use Docker Compose**: `docker compose -f docker/docker-compose.test.yml up`
- Direct pytest commands fail due to missing PostgreSQL, Redis dependencies
- Use `docker compose logs` to diagnose issues

### Host E2E Testing
**CRITICAL: ALWAYS activate virtual environment first**
- Command: `. venv/bin/activate && pytest tests/e2e/`
- E2E tests manage their own development services
- 22 comprehensive E2E tests available

### Quick Reference
```bash
# Unit/Integration (Docker)
docker compose -f docker/docker-compose.test.yml up

# E2E (Host with venv)
. venv/bin/activate && pytest tests/e2e/
```

### VS Code Integration
- **Smart Test Runner**: Automatically routes tests to correct environment
- **Test Explorer**: Visual test management with play buttons
- **Tasks**: Use `Ctrl+Shift+P` → "Tasks: Run Task" for common workflows
- **Debugging**: Set breakpoints and use `F5` for interactive debugging

### VS Code Integration
**CONFIGURED: Smart test runner automatically routes tests**
- Use VS Code Test Explorer for seamless testing
- Integration tests → Docker Compose automatically
- E2E tests → Local venv automatically
- See `.vscode/README.md` for details

### Documentation
- **Primary reference**: `docs/TEST_FRAMEWORK_OVERVIEW.md`

## Project Structure
- Source code: `src/`
- Tests: `tests/`
- Docker configs: `docker/`
- Documentation: `docs/`

## Development Workflow
- This is an MCP (Model Context Protocol) server project
- Uses FastAPI with SSE support
- Requires PostgreSQL and Redis for full functionality
