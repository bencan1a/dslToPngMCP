# =============================================================================
# Nginx Production Configuration
# =============================================================================
# Production-optimized configuration with enhanced security,
# aggressive caching, and performance optimizations
# =============================================================================

# =============================================================================
# HTTP Server Block - Redirect to HTTPS
# =============================================================================
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    
    server_name _;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Allow Let's Encrypt challenges
    location /.well-known/acme-challenge/ {
        root /var/www/html;
        try_files $uri =404;
    }
    
    # Health check (HTTP only)
    location /health {
        access_log off;
        return 200 'healthy\n';
        add_header Content-Type text/plain;
        add_header X-Health-Check "nginx-ok";
    }
    
    # Redirect everything else to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# =============================================================================
# HTTPS Server Block - Main Application
# =============================================================================
server {
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;
    
    server_name ${DOMAIN_NAME};
    
    # Production logging (less verbose)
    error_log /var/log/nginx/error.log error;
    access_log /var/log/nginx/access.log main;
    
    # Root directory for static files
    root /var/www/html;
    index index.html index.htm;
    
    # ==========================================================================
    # SSL Configuration
    # ==========================================================================
    ssl_certificate /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN_NAME}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/${DOMAIN_NAME}/chain.pem;
    
    # Modern SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # OCSP stapling
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # ==========================================================================
    # Security Headers
    # ==========================================================================
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    add_header X-Request-ID $request_id always;
    
    # Remove server information
    more_clear_headers Server;
    
    # ==========================================================================
    # Health Check Endpoint
    # ==========================================================================
    location /health {
        access_log off;
        return 200 'healthy\n';
        add_header Content-Type text/plain;
        add_header X-Health-Check "nginx-ok";
    }
    
    # ==========================================================================
    # API Endpoints - Proxy to FastAPI Backend
    # ==========================================================================
    location /api/ {
        # Strict rate limiting for production
        limit_req zone=api burst=10 nodelay;
        
        # Proxy configuration
        proxy_pass http://fastapi_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # Cache for API responses (selective)
        proxy_cache api_cache;
        proxy_cache_valid 200 10m;
        proxy_cache_valid 404 1m;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;
        
        # Cache bypass conditions
        proxy_cache_bypass $http_pragma $http_authorization;
        proxy_no_cache $http_pragma $http_authorization;
        
        # Add cache status header
        add_header X-Cache-Status $upstream_cache_status;
    }
    
    # Root API endpoints (health, docs - limited access in production)
    location = /health {
        limit_req zone=api burst=5 nodelay;
        
        proxy_pass http://fastapi_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        # Cache health checks
        proxy_cache api_cache;
        proxy_cache_valid 200 30s;
    }
    
    # Documentation endpoints (restricted access)
    location ~ ^/(docs|redoc|openapi\.json)$ {
        # Allow only from specific IPs or require authentication
        # allow 10.0.0.0/8;
        # deny all;
        
        limit_req zone=api burst=5 nodelay;
        
        proxy_pass http://fastapi_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
    }
    
    # DSL processing endpoints
    location ~ ^/(render|validate|status)/ {
        limit_req zone=render burst=5 nodelay;
        
        proxy_pass http://fastapi_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        # Extended timeouts for rendering
        proxy_connect_timeout 10s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # Large body size for DSL content
        client_max_body_size 50m;
        
        # No caching for render endpoints
        proxy_cache_bypass 1;
        proxy_no_cache 1;
        
        # Rate limiting headers
        add_header X-RateLimit-Limit "5 per second";
        add_header X-RateLimit-Remaining $limit_req_status;
    }
    
    # Task management endpoints
    location ~ ^/(tasks/)(.*)$ {
        limit_req zone=api burst=10 nodelay;
        
        proxy_pass http://fastapi_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_Set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        # Cache task status for brief periods
        proxy_cache api_cache;
        proxy_cache_valid 200 30s;
        proxy_cache_bypass $http_pragma;
    }
    
    # ==========================================================================
    # Static File Serving - PNG Results with Aggressive Caching
    # ==========================================================================
    location /static/png/ {
        alias /var/www/static/png/;
        
        # Rate limiting for static files
        limit_req zone=static burst=30 nodelay;
        
        # Aggressive caching for PNG files
        expires 1d;
        add_header Cache-Control "public, immutable, no-transform";
        add_header X-Static-File "png";
        
        # Security headers for images
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options SAMEORIGIN;
        
        # Enable gzip for large PNGs
        gzip_static on;
        
        # Try to serve file, fallback to 404
        try_files $uri =404;
        
        # MIME type for PNG files
        location ~* \.png$ {
            add_header Content-Type image/png;
            
            # Hot/Warm storage optimization
            # Files accessed recently stay in hot storage
            add_header X-Storage-Tier "hot";
        }
        
        # Return 404 for non-PNG files
        location ~* \.((?!png$).)*$ {
            return 404;
        }
    }
    
    # ==========================================================================
    # Monitoring and Metrics (Restricted Access)
    # ==========================================================================
    location /nginx-status {
        stub_status on;
        access_log off;
        
        # Restrict to monitoring systems
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
    }
    
    location /metrics {
        # Prometheus metrics (if enabled)
        proxy_pass http://fastapi_backend/metrics;
        proxy_set_header Host $host;
        
        # Restrict to monitoring systems
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
    }
    
    # ==========================================================================
    # Default Static Content with Optimization
    # ==========================================================================
    location / {
        try_files $uri $uri/ /index.html;
        
        # Security for static files
        add_header X-Frame-Options SAMEORIGIN always;
        add_header X-Content-Type-Options nosniff always;
        
        # Cache control for different file types
        location ~* \.(css|js)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            gzip_static on;
        }
        
        location ~* \.(jpg|jpeg|png|gif|ico|svg|webp)$ {
            expires 6M;
            add_header Cache-Control "public, immutable";
        }
        
        location ~* \.(woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Access-Control-Allow-Origin "*";
        }
        
        location ~* \.(html|htm)$ {
            expires 1h;
            add_header Cache-Control "public, must-revalidate";
        }
    }
    
    # ==========================================================================
    # Security - Block Common Attack Vectors
    # ==========================================================================
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~* \.(log|bak|backup|old|tmp)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~* /(config|\.env|\.git) {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Block SQL injection attempts
    location ~* union.*select.*\( {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # ==========================================================================
    # Error Pages
    # ==========================================================================
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    error_page 429 /429.html;
    
    location = /404.html {
        root /var/www/html;
        internal;
    }
    
    location = /50x.html {
        root /var/www/html;
        internal;
    }
    
    location = /429.html {
        root /var/www/html;
        internal;
    }
}

# =============================================================================
# Additional Server Block for API-only Access (Optional)
# =============================================================================
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    
    server_name api.${DOMAIN_NAME};
    
    # Same SSL configuration
    ssl_certificate /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN_NAME}/privkey.pem;
    
    # API-only endpoints with stricter rate limiting
    location / {
        limit_req zone=api burst=5 nodelay;
        
        proxy_pass http://fastapi_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        # API-specific headers
        add_header X-API-Version "1.0";
        add_header X-RateLimit-Limit "5 per second";
    }
}