[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "dsl-to-png-mcp"
version = "1.0.0"
description = "Model Context Protocol server for converting DSL to PNG images"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "DSL to PNG MCP Team"}
]
keywords = ["mcp", "dsl", "png", "rendering", "ui", "mockup"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Multimedia :: Graphics :: Graphics Conversion",
]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.104.0,<1.0.0",
    "uvicorn[standard]>=0.24.0,<1.0.0",
    "pydantic>=2.5.0,<3.0.0",
    "pydantic-settings>=2.1.0,<3.0.0",
    "mcp>=1.0.0,<2.0.0",
    "playwright>=1.40.0,<2.0.0",
    "celery[redis]>=5.3.0,<6.0.0",
    "redis>=5.0.0,<6.0.0",
    "Pillow>=10.0.0,<11.0.0",
    "cerberus>=1.3.4,<2.0.0",
    "httpx>=0.25.0,<1.0.0",
    "orjson>=3.9.0,<4.0.0",
    "asyncpg>=0.29.0,<1.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "python-dateutil>=2.8.0,<3.0.0",
    "click>=8.1.0,<9.0.0",
    "structlog>=23.2.0,<24.0.0",
    "jinja2>=3.1.0,<4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "pytest-xdist>=3.3.0,<4.0.0",
    "black>=23.9.0,<24.0.0",
    "isort>=5.12.0,<6.0.0",
    "flake8>=6.1.0,<7.0.0",
    "mypy>=1.6.0,<2.0.0",
    "pre-commit>=3.5.0,<4.0.0",
    "ipython>=8.16.0,<9.0.0",
    "jupyter>=1.0.0,<2.0.0",
    "debugpy>=1.8.0,<2.0.0",
    "line-profiler>=4.1.0,<5.0.0",
    "memory-profiler>=0.61.0,<1.0.0",
    "locust>=2.17.0,<3.0.0",
    "types-redis>=4.6.0,<5.0.0",
    "types-Pillow>=10.0.0,<11.0.0",
    "types-python-dateutil>=2.8.0,<3.0.0",
    "bandit>=1.7.0,<2.0.0",
    "safety>=2.3.0,<3.0.0",
    "pytest-postgresql>=5.0.0,<6.0.0",
    "pytest-playwright>=0.4.0,<1.0.0",
]
prod = [
    "gunicorn>=21.2.0,<22.0.0",
    "prometheus-client>=0.19.0,<1.0.0",
    "sentry-sdk[fastapi]>=1.38.0,<2.0.0",
    "ujson>=5.8.0,<6.0.0",
    "cachetools>=5.3.0,<6.0.0",
    "cryptography>=41.0.0,<42.0.0",
    "passlib[bcrypt]>=1.7.4,<2.0.0",
    "slowapi>=0.1.9,<1.0.0",
    "healthcheck>=1.3.3,<2.0.0",
    "supervisor>=4.2.0,<5.0.0",
    "dynaconf>=3.2.0,<4.0.0",
    "psutil>=5.9.0,<6.0.0",
]

[project.urls]
Homepage = "https://github.com/your-org/dsl-to-png-mcp"
Documentation = "https://github.com/your-org/dsl-to-png-mcp#readme"
Repository = "https://github.com/your-org/dsl-to-png-mcp.git"
Issues = "https://github.com/your-org/dsl-to-png-mcp/issues"

[project.scripts]
dsl-png-mcp = "src.mcp_server.server:main"
dsl-png-api = "src.api.main:run_development_server"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]
exclude = []

# Black configuration
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["src"]
skip_glob = ["**/migrations/*"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true
show_error_codes = true
files = ["src"]
exclude = [
    "^tests/",
    "^test_tmp/",
    "^examples/",
    "^docs/",
    "^scripts/",
    "^docker/",
    "^requirements/",
    "^backups/",
    "^data/",
    "^secrets/",
    "^test_storage/",
    "^\..*",
]

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "playwright.*",
    "cerberus.*",
    "mcp.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--durations=10",
    "--showlocals",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-branch",
    "--cov-fail-under=80",
    "--junit-xml=test-results.xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "smoke: Quick smoke tests for basic functionality",
    "unit: Unit tests for individual components",
    "integration: Integration tests for component interactions",
    "performance: Performance and load testing",
    "security: Security and vulnerability tests",
    "e2e: End-to-end tests",
    "slow: Tests that take a long time to run",
    "requires_browser: Tests that require browser automation",
    "requires_redis: Tests that require Redis connection",
    "requires_postgres: Tests that require PostgreSQL connection",
    "requires_docker: Tests that require Docker",
    "regression: Regression tests",
    "critical: Critical path tests that must pass",
]
asyncio_mode = "auto"
timeout = 300
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:.*unclosed.*:ResourceWarning",
    "ignore:.*coroutine.*was never awaited:RuntimeWarning",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_file = "tests.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
cache_dir = ".pytest_cache"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Flake8 configuration (in setup.cfg since flake8 doesn't support pyproject.toml)
# See setup.cfg for flake8 configuration

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_possible for tests

# Safety configuration
[tool.safety]
ignore = []